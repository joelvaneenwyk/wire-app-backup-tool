import java.util.Properties
import com.github.jengelman.gradle.plugins.shadow.tasks.ShadowJar

/*
 * This file was generated by the Gradle 'init' task.
 */

plugins {
    id("buildlogic.java-application-conventions")
    id("org.jetbrains.kotlin.jvm") version "1.4.31"
    id("net.nemerosa.versioning") version "3.1.0"
    id("com.github.johnrengelman.shadow") version "8.1.1"
}

dependencies {
    implementation("org.apache.commons:commons-text")

    implementation(libs.pluginz.konan)
    implementation(libs.pluginz.kotlin)

    implementation(libs.github.johnrengelman.shadow)
    implementation(libs.nemerosa.versioning)

    testImplementation(libs.pluginz.test)
    testImplementation(libs.pluginz.test.junit5)
    testImplementation(libs.pluginz.script.runtime)

    testImplementation(libs.junit.jupiter.engine)

    testRuntimeOnly("org.junit.platform:junit-platform-launcher")

    implementation("org.apache.commons:commons-text")

    implementation(libs.wire.xenon)
    // implementation(project(":libs:xenon"))

    implementation(libs.wire.helium)
    // implementation("com.wire", "helium", "1.0-SNAPSHOT")
    // implementation(project(":libs:helium"))

    // ------- Java dependencies -------

    implementation("org.glassfish.jersey.inject", "jersey-hk2", "2.32")
    implementation("org.glassfish.jersey.media", "jersey-media-json-jackson", "2.32")
    implementation("javax.activation", "activation", "1.1.1")

    implementation("org.slf4j", "slf4j-simple", "2.0.0-alpha1")

     // command line arguments parsing
    implementation("info.picocli", "picocli", "4.6.1")

     // html compilation
     val atlassianVersion = "0.17.1"
    implementation("org.commonmark", "commonmark", atlassianVersion)
    implementation("org.commonmark", "commonmark-ext-autolink", atlassianVersion)

     val htmlToPdfVersion = "1.0.6"
    implementation("com.openhtmltopdf", "openhtmltopdf-core", htmlToPdfVersion)
    implementation("com.openhtmltopdf", "openhtmltopdf-pdfbox", htmlToPdfVersion)
    implementation("com.openhtmltopdf", "openhtmltopdf-svg-support", htmlToPdfVersion)

    implementation("com.github.spullara.mustache.java", "compiler", "0.9.7")

     // ------- Common dependencies -------
    implementation("net.lingala.zip4j", "zip4j", "2.6.1")

     // ------- Kotlin dependencies -------
    implementation("pw.forst.tools", "katlib", "1.2.1")

     // libsodium for decryption
    implementation("com.goterl.lazycode", "lazysodium-java", "4.3.4") {
         // otherwise the application won't start, the problem is combination of Dropwizard and sl4j 2.0
         exclude("org.slf4j", "slf4j-api")
     }
    implementation("net.java.dev.jna", "jna", "5.7.0")
     // logging
    implementation("io.github.microutils", "kotlin-logging", "2.0.6")
     // database
     val exposedVersion = "0.30.1"
    implementation("org.jetbrains.exposed", "exposed-core", exposedVersion)
    implementation("org.jetbrains.exposed", "exposed-dao", exposedVersion)
    implementation("org.jetbrains.exposed", "exposed-jdbc", exposedVersion)
    implementation("org.jetbrains.exposed", "exposed-java-time", exposedVersion)
    implementation("org.xerial", "sqlite-jdbc", "3.34.0")
     // jackson for kotlin
    implementation("com.fasterxml.jackson.module", "jackson-module-kotlin", "2.11.1")
     // correct reflect lib until jackson fixes theirs
    implementation("org.jetbrains.kotlin", "kotlin-reflect", "1.4.31")

    implementation("org.jetbrains.kotlin", "kotlin-native-gradle-plugin", "1.3.41")

     // testing
    val junitVersion = "5.7.1"
    testImplementation("org.junit.jupiter", "junit-jupiter-api", junitVersion)
    testRuntimeOnly("org.junit.jupiter", "junit-jupiter-engine", junitVersion)
}

group = "com.wire.backups"
val mClass = "com.wire.backups.exports.Service"

version = (versioning.info.tag ?: versioning.info.lastTag) +
        if (versioning.info.dirty) "-dirty" else ""

application {
    // Define the main class for the application.
    mainClass.set(mClass)
}

configure<JavaPluginExtension> {
    sourceCompatibility = JavaVersion.VERSION_17
}

kotlin {
    jvmToolchain(17)
}

tasks {
     compileKotlin {
     }

     compileTestKotlin {
     }


     withType<Test> {
         systemProperties["jna.library.path"] = "${projectDir}/libs"
     }

     withType<JavaCompile> {
         options.encoding = "UTF-8"
     }

    // withType<ShadowJar> {
    shadowJar {
        // enableRelocation = true
        mergeServiceFiles()
        manifest {
            attributes(mapOf("Main-Class" to mClass))
        }
        // because there's some conflict (LICENSE already exists) during the unzipping process
        // by excluding it from the shadow jar we try to fix problem on Oracle JVM 8
        exclude("LICENSE")
        // standard Dropwizard excludes
        exclude("META-INF/*.DSA", "META-INF/*.RSA", "META-INF/*.SF")
        duplicatesStrategy = DuplicatesStrategy.EXCLUDE
        archiveFileName.set("backup-export.jar")
     }

     test {
         useJUnitPlatform()
     }

     classes {
         dependsOn("createVersionFile")
     }

     register("createVersionFile") {
         dependsOn(processResources)
         doLast {
             Properties().apply {
                 setProperty("version", project.version.toString())
                 // saveToFile(File("$buildDir/resources/main/version.properties"))
             }
         }
     }

     register("resolveDependencies") {
         doLast {
             project.allprojects.forEach { subProject ->
                 with(subProject) {
                     buildscript.configurations.forEach { if (it.isCanBeResolved) it.resolve() }
                     configurations.compileClasspath.get().resolve()
                     configurations.testCompileClasspath.get().resolve()
                 }
             }
         }
     }
}
